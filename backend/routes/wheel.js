const express = require("express");
const Prize = require("../models/Prize");
const Token = require("../models/Token");
const SpinResult = require("../models/SpinResult");
const router = express.Router();

// Get active prizes (public) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 8 ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
router.get("/prizes", async (req, res) => {
  try {
    console.log("Fetching active prizes for wheel...");

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° position ‡∏´‡∏£‡∏∑‡∏≠ createdAt
    let prizes = await Prize.find({ isActive: true })
      .sort({ position: 1, createdAt: 1 })
      .select("name description probability color isActive position")
      .lean();

    console.log(`Found ${prizes.length} active prizes from database`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡∏¥‡∏ô 8 ‡∏≠‡∏±‡∏ô‡πÑ‡∏´‡∏°
    if (prizes.length > 8) {
      console.warn(
        `‚ö†Ô∏è Too many prizes (${prizes.length}), limiting to first 8`
      );
      prizes = prizes.slice(0, 8);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 8 ‡∏≠‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö 8 ‡∏≠‡∏±‡∏ô
    while (prizes.length < 8) {
      const emptySlot = {
        _id: `empty_${prizes.length}`,
        name: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
        description: "‡πÇ‡∏ä‡∏Ñ‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        probability: 0,
        color: "#6B7280",
        isActive: true,
        position: prizes.length,
      };
      prizes.push(emptySlot);
      console.log(`Added empty slot at position ${prizes.length - 1}`);
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î position ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (0-7)
    prizes.forEach((prize, index) => {
      prize.wheelPosition = index;
    });

    console.log("Final wheel configuration:");
    prizes.forEach((prize, index) => {
      console.log(`Position ${index}: "${prize.name}" (${prize.probability}%)`);
    });

    res.json(prizes);
  } catch (error) {
    console.error("Error fetching prizes:", error);
    res.status(500).json({
      message: "Server error",
      error: error.message,
      details: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ",
    });
  }
});

// Spin wheel (public) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
router.post("/spin", async (req, res) => {
  try {
    const { tokenCode } = req.body;

    console.log(`üé≤ Spin request with token: ${tokenCode}`);

    if (!tokenCode) {
      return res.status(400).json({ message: "Token code is required" });
    }

    // Validate token
    const token = await Token.findOne({
      tokenCode: tokenCode.toUpperCase(),
      isUsed: false,
      isDeleted: false,
      expiresAt: { $gt: new Date() },
    });

    if (!token) {
      console.log(`‚ùå Invalid token: ${tokenCode}`);
      return res.status(404).json({
        message: "Invalid, expired, or already used token",
      });
    }

    // Mark token as used
    const tokenCheck = await Token.findOneAndUpdate(
      {
        _id: token._id,
        isUsed: false,
        isDeleted: false,
        expiresAt: { $gt: new Date() },
      },
      {
        $set: {
          isUsed: true,
          usedAt: new Date(),
          usedBy: {
            userAgent: req.get("User-Agent"),
            ipAddress:
              req.ip ||
              req.connection.remoteAddress ||
              req.socket.remoteAddress,
          },
        },
      },
      { new: true }
    );

    if (!tokenCheck) {
      console.log(`‚ùå Token already used: ${tokenCode}`);
      return res.status(409).json({
        message: "Token has already been used or is no longer valid",
      });
    }

    console.log(`‚úÖ Token ${tokenCode} marked as used`);

    // Get active prizes ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏á‡∏•‡πâ‡∏≠ 8 ‡∏ä‡πà‡∏≠‡∏á
    let prizes = await Prize.find({ isActive: true })
      .sort({ position: 1, createdAt: 1 })
      .lean();

    if (prizes.length > 8) {
      prizes = prizes.slice(0, 8);
    }

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 8
    const originalPrizeIds = prizes.map((p) => p._id.toString());
    while (prizes.length < 8) {
      prizes.push({
        _id: `empty_${prizes.length}`,
        name: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
        description: "‡πÇ‡∏ä‡∏Ñ‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        probability: 0,
        color: "#6B7280",
        isActive: true,
      });
    }

    console.log(`üéÅ Wheel configured with ${prizes.length} slots`);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    const realPrizes = prizes.filter(
      (p) => !p._id.toString().startsWith("empty_") && p.probability > 0
    );
    const totalProbability = realPrizes.reduce(
      (sum, prize) => sum + prize.probability,
      0
    );

    console.log(`üìä Total probability from real prizes: ${totalProbability}%`);

    let selectedPrize;
    let selectedIndex;

    if (totalProbability === 0 || realPrizes.length === 0) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•"
      const emptyPrizes = prizes.filter((p) =>
        p._id.toString().startsWith("empty_")
      );
      selectedPrize =
        emptyPrizes[Math.floor(Math.random() * emptyPrizes.length)];
      selectedIndex = prizes.findIndex((p) => p._id === selectedPrize._id);
    } else {
      // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
      const random = Math.random() * totalProbability;
      console.log(
        `üé≤ Random value: ${random.toFixed(2)} (out of ${totalProbability})`
      );

      let currentProbability = 0;
      selectedPrize = realPrizes[0]; // Default fallback

      for (const prize of realPrizes) {
        currentProbability += prize.probability;
        if (random <= currentProbability) {
          selectedPrize = prize;
          break;
        }
      }

      // ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠
      selectedIndex = prizes.findIndex(
        (p) => p._id.toString() === selectedPrize._id.toString()
      );
    }

    console.log(
      `üéØ Selected prize: "${selectedPrize.name}" at wheel position ${selectedIndex}`
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏£‡∏¥‡∏á)
    let spinResult = null;
    if (!selectedPrize._id.toString().startsWith("empty_")) {
      spinResult = new SpinResult({
        tokenCode: tokenCheck.tokenCode,
        prize: selectedPrize._id,
        userAgent: req.get("User-Agent"),
        ipAddress:
          req.ip || req.connection.remoteAddress || req.socket.remoteAddress,
      });
      await spinResult.save();
      console.log(`üíæ Spin result saved: ${spinResult._id}`);
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Frontend
    const response = {
      success: true,
      prize: {
        _id: selectedPrize._id,
        name: selectedPrize.name,
        description: selectedPrize.description,
        color: selectedPrize.color,
        probability: selectedPrize.probability,
      },
      wheelPosition: selectedIndex, // üî• ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÉ‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠ (0-7)
      spinId: spinResult?._id || null,
      tokenUsed: {
        code: tokenCheck.tokenCode,
        usedAt: tokenCheck.usedAt,
      },
      message: "Spin successful",
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
      debug: {
        totalSlots: prizes.length,
        realPrizes: realPrizes.length,
        totalProbability: totalProbability,
      },
    };

    console.log("üì§ Sending response with wheelPosition:", selectedIndex);
    res.json(response);
  } catch (error) {
    console.error("‚ùå Spin wheel error:", error);
    res.status(500).json({
      message: "Server error",
      error: error.message,
      details: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠",
    });
  }
});

// ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...
router.get("/stats", async (req, res) => {
  try {
    const totalSpins = await SpinResult.countDocuments();
    const totalPrizes = await Prize.countDocuments({ isActive: true });
    const totalActiveTokens = await Token.countDocuments({
      isUsed: false,
      isDeleted: false,
      expiresAt: { $gt: new Date() },
    });

    res.json({
      totalSpins,
      totalPrizes,
      totalActiveTokens,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("Error fetching wheel stats:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
});

router.get("/health", (req, res) => {
  res.json({
    status: "OK",
    message: "Wheel API is running",
    timestamp: new Date().toISOString(),
  });
});

module.exports = router;
